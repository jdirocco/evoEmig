pre {
	"Running ETL\n".println();
	
	// GLOBAL VARIABLES
	
	var DEBUG_MODE = false;
	
	// map <reference, referenced class attribute>
	// a cache to don't ask the user the same question over and over again,
	// used for replacing attributes that became references with
	// an attribute of the referenced class.
	var referenceReplacers = Map{};
	
	// map <attribute, replacer attribute>
	// as above, but for replacing attributes that were deleted with
	// an added attribute.
	var deletedAttributeReplacers = Map{};
	
	// map <reference, TemplateInvocation replacer template>
	// as above, but for replacing referred templates in template invocations
	// when they became invalid since the reference changed type.
	var templateReplacers = Map{};
}

post {
	"\nRunning Successful".println();
}

operation Any debug() : Any {
  if (DEBUG_MODE) {
    return self.println();
  }
}

// Custom equivalent function:
// is recursive and returns the element itself if there is no matching rule for it.
operation Any convert() {
  
  var equivalent;
  
  if (self.isKindOf(Collection)) {
    // collection -> recursion
    'Converting Collection '.concat(self.toString()).debug();
    equivalent = self->collect( element | element.convert() );
    'Converted: Collection '.concat(equivalent.toString()).debug();
  } else {
    // single element
    equivalent = self.equivalent();
    if (equivalent.isUndefined()) {
      // no matching rule(s)
      equivalent = self;
    }
  }

  return equivalent;
}

///////////////////// DELTA UTILITIES ///////////////////////////////

operation existRemovedAttribute(attributeName : String, parentClassName : String) : Boolean {
  return Delta!ChangedEClass.allInstances()->exists(changedClass |
    changedClass.name == parentClassName and changedClass.eStructuralFeatures->exists(feature |
      feature.isTypeOf(Delta!DeletedEAttribute) and feature.name == attributeName
    )
  );
}

operation existAddedReference(referenceName : String, parentClassName : String) : Boolean {
  return Delta!ecoreDiff::EClass.allInstances()->exists(class |
    class.name == parentClassName and class.eStructuralFeatures->exists(feature |
      feature.isTypeOf(Delta!AddedEReference) and feature.name == referenceName
    )
  );
}

operation existAddedAttributes(parentClassName : String) : Boolean {
  return Delta!ecoreDiff::EClass.allInstances()->exists(class |
    class.name == parentClassName and class.eStructuralFeatures->exists(feature |
      feature.isTypeOf(Delta!AddedEAttribute)
    )
  );
}

operation existChangedReferencedClass(referenceName : String, parentClassName : String) : Boolean {
  return Delta!ChangedEClass.allInstances()->exists(changedClass |
    changedClass.name == parentClassName and changedClass.eStructuralFeatures->exists(feature |
      feature.isTypeOf(Delta!ChangedEReference) and feature.name == referenceName and
      feature.eType.name <> changedClass.updatedElement.at(0).eStructuralFeatures->selectOne(otherFeature | 
        otherFeature.isTypeOf(Delta!ecoreDiff::EReference) and otherFeature.name == referenceName
      ).eType.name
    )
  );
}

///////////////////// BNR 1 ///////////////////////////////
// Breaking change: used attribute changed into a reference
// Solution: choose the referenced class attribute to replace it

operation isBNR1(s : Acceleo!ocl::ecore::PropertyCallExp) : Boolean {

  if (not s.referredProperty->isTypeOf(Metamodel!ecore::EAttribute)) {
    return false;
  }
  var attribute = s.referredProperty;
  var parentClass = s.source.eType; // attribute parent class
  
  // check if the attribute has been removed
  // and a reference with the same name was added
  return existRemovedAttribute(attribute.name, parentClass.name) and
         existAddedReference(attribute.name, parentClass.name);
}

rule BNR1_PropertyCallExp
  transform s : Acceleo!ocl::ecore::PropertyCallExp
  to t : evoAcceleo!ocl::ecore::PropertyCallExp {
  guard : isBNR1(s)
  
    'Transforming PropertyCallExp for BNR1'.debug();    
    
    var attribute = s.referredProperty;
    
    // get EAttribute evolved parent EClass
    var parentClass = s.source.eType;
    var evoParentClass = parentClass.convert();
    
    var evoReference = evoParentClass.eAllReferences->selectOne(evoReference | evoReference.name == attribute.name);
    var evoReferencedClass = evoReference.eReferenceType;
    
    // get the referenced class attribute that must replace the reference
    var evoReferencedAttribute = referenceReplacers.get(evoReference); // try with cache first
    if (evoReferencedAttribute.isUndefined()) { // let the user choose the referenced attribute to use
  
      // get referenced class attributes
      var evoReferenceAttributes = evoReferencedClass.eAllAttributes;
      
      // let the user choose the referenced class attribute to use
      var message = parentClass.name.concat('.').concat(attribute.name)
                    .concat(' became a reference, please select the referenced class attribute to use:');
      evoReferencedAttribute = System.user.choose(message, evoReferenceAttributes);
      referenceReplacers.put(evoReference, evoReferencedAttribute);   
    }
    
    'BNR1: '.concat(parentClass.name).concat('.').concat(evoReference.name)
            .concat(' replaced by ').concat(parentClass.name).concat('.').concat(evoReference.name).concat('.').concat(evoReferencedAttribute.name).println();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.propertyEndPosition = s.propertyEndPosition;
    t.markedPre = s.markedPre;
    
    t.eType = evoReferencedAttribute.eType;
    
    t.source = s.source.convert();
    t.source.eType = evoReferencedClass; // update referenced class
    
    t.referredProperty = evoReferencedAttribute;
    
    'Transformed for BNR1: PropertyCallExp'.debug();
  }

///////////////////// BNR 2 ///////////////////////////////
// Breaking change: used attribute replaced by other attributes
// Solution: choose the attribute to use among the new ones

operation isBNR2(s : Acceleo!ocl::ecore::PropertyCallExp) : Boolean {

  if (not s.referredProperty->isTypeOf(Metamodel!ecore::EAttribute)) {
    return false;
  }
  var attribute = s.referredProperty;
  var parentClass = s.source.eType; // attribute parent class
  
  return existRemovedAttribute(attribute.name, parentClass.name) and
         existAddedAttributes(parentClass.name);
}


rule BNR2_PropertyCallExp
  transform s : Acceleo!ocl::ecore::PropertyCallExp
  to t : evoAcceleo!ocl::ecore::PropertyCallExp {
  guard : isBNR2(s)
  
    'Transforming PropertyCallExp for BNR2'.debug();
    
    var attribute = s.referredProperty;

    // get EAttribute evolved parent EClass
    var parentClass = s.source.eType;
    var evoParentClass = parentClass.convert();
  
    // get the evolved attribute from the evolved class.
    // Note: the attribute could be in a super class, so we use eAllAttributes to get also super class attributes.
    var evoAttribute = evoParentClass.eAllAttributes->selectOne(evoAttribute | evoAttribute.name == attribute.name);
    
    var newEvoAttributes = evoParentClass.eAllAttributes->excluding(parentClass.eAllAttributes);
    
    var evoReplacerAttribute = deletedAttributeReplacers.get(attribute); // try with cache first
    if (evoReplacerAttribute.isUndefined()) {
      // let the user choose the attribute to use
      var message = parentClass.name.concat('.').concat(attribute.name)
                    .concat(' was replaced by new attributes, please select the one to use:');
      evoReplacerAttribute = System.user.choose(message, newEvoAttributes);
      deletedAttributeReplacers.put(attribute, evoReplacerAttribute); 
    }
    
    'BNR2: '.concat(parentClass.name).concat('.').concat(attribute.name)
            .concat(' replaced by ').concat(parentClass.name).concat('.').concat(evoReplacerAttribute.name).println();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.propertyEndPosition = s.propertyEndPosition;
    t.markedPre = s.markedPre;
    
    t.eType = evoReplacerAttribute.eType; // new attribute type
    
    t.source = s.source.convert();
    
    t.referredProperty = evoReplacerAttribute;
    
    'Transformed for BNR2: PropertyCallExp'.debug();
  }

///////////////////// BNR 3 ///////////////////////////////
// Breaking change: reference used for a template invocation changes type, making the invocated template unusable.
// Solution: choose the new template to call, among the ones compatible with the new referenced class.


// a template for a class A is compatible with a class B if B is either A or a subclass of A
operation Acceleo!Template isCompatibleWith(class : Metamodel!ecore::EClass) : Boolean {
  var templateClass = self.parameter.eType.at(0); // Template parameter eType is a Sequence 
  return class.name == templateClass.name or class.eSuperTypes->includes(templateClass);
}

operation isBNR3(s : Acceleo!TemplateInvocation) : Boolean {

  var argument = s.argument.at(0); // argument is actually an OrderedSet

  if (not argument->isTypeOf(Acceleo!ocl::ecore::PropertyCallExp)) {
  	return false;
  }
  var propertyCallExp = argument;

  if (not propertyCallExp.referredProperty->isTypeOf(Metamodel!ecore::EReference)) {
  	return false;
  }
  var reference = propertyCallExp.referredProperty;
  
  var parentClass = propertyCallExp.source.eType; // reference parent class
   
  if (existChangedReferencedClass(reference.name, parentClass.name)) { // the reference changed type
    // check if the current template is incompatible with the referenced class
 
    var evoReference = reference.convertFromPropertyCallExp(propertyCallExp);
    var evoReferencedClass = evoReference.eReferenceType;
    var template = s.definition;   
    if (not template.isCompatibleWith(evoReferencedClass)) {
      return true;
    }
  }

  return false;
}

rule BNR3_TemplateInvocation
  transform s : Acceleo!TemplateInvocation
  to t : evoAcceleo!TemplateInvocation {
  guard : isBNR3(s)
  
  	'Transforming TemplateInvocation for BNR3'.debug();
  
    var propertyCallExp = s.argument.at(0);
    var template = s.definition;
    var reference = propertyCallExp.referredProperty;
    
    var evoReference = reference.convertFromPropertyCallExp(propertyCallExp);
    var evoReferencedClass = evoReference.eReferenceType;
    var parentClass = propertyCallExp.source.eType; // reference parent class
  
    var replacerTemplate = templateReplacers.get(reference); // try with cache first
    if (replacerTemplate.isUndefined()) {
      // let the user choose the compatible template to use
           
      var compatibleTemplates = Acceleo!Template.allInstances()->select(otherTemplate | otherTemplate.isCompatibleWith(evoReferencedClass));
      
      var message = template.name.concat(' is not compatible anymore with ').concat(parentClass.name).concat('.').concat(reference.name)
                    .concat(', please select the template to use:');
      replacerTemplate = System.user.choose(message, compatibleTemplates);
      templateReplacers.put(reference, replacerTemplate); 
    }
    
    'BNR3: '.concat(template.name).concat('(').concat(parentClass.name).concat('.').concat(reference.name).concat(')')
            .concat(' replaced by ').concat(replacerTemplate.name).concat('(').concat(parentClass.name).concat('.').concat(reference.name).concat(')').println();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.super = s.super;
    
    t.argument = s.argument.convert();
    t.argument.at(0).eType = evoReferencedClass; // the reference changed type => it must be updated
    
    t.definition = replacerTemplate.convert();
    
    t.eType = s.eType.convert();
    
    'Transformed for BNR3: TemplateInvocation'.debug();
  }
 
///////////////////// CONSERVATIVE COPY ///////////////////////////////
// Updates everything to the evolved metamodel without doing any other change.

rule Module
  transform s : Acceleo!Module
  to t : evoAcceleo!Module {
  	'Transforming Module'.debug();
  	
	t.name = s.name;
	t.nsURI = s.nsURI;
	t.nsPrefix = s.nsPrefix;
	t.deprecated = s.deprecated;
	t.startHeaderPosition = s.startHeaderPosition;
	t.endHeaderPosition = s.endHeaderPosition;
	t.eFactoryInstance = s.eFactoryInstance;
	t.documentation = s.documentation;
	
	t.eAnnotations = s.eAnnotations.convert();
	t.eClassifiers = s.eClassifiers.convert();
	t.eSubpackages = s.eSubpackages.convert();
	t.input = s.input.convert();
	t.`extends` = s.`extends`.convert();
	t.imports = s.imports.convert();
	t.ownedModuleElement = s.ownedModuleElement.convert();
	
	'Transformed: Module'.debug();
}
 
rule TypedModel
  transform s : Acceleo!TypedModel
  to t : evoAcceleo!TypedModel {
  	'Transforming TypedModel'.debug();

    t.takesTypesFrom = s.takesTypesFrom.convert(); // contains the main metamodel EPackage
    
    'Transformed: TypedModel'.debug();
  }

rule Template
  transform s : Acceleo!Template
  to t : evoAcceleo!Template {
  	'Transforming Template'.debug();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.visibility = s.visibility;
    t.deprecated = s.deprecated;
    t.main = s.main;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.documentation = s.documentation;
    t.`guard` = s.`guard`;
    t.`post` = s.`post`;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.overrides = s.overrides.convert();
    t.parameter = s.parameter.convert(); // ocl::ecore::Variable
    
    'Transformed: Template'.debug();
  }
  
rule FileBlock
  transform s : Acceleo!FileBlock
  to t : evoAcceleo!FileBlock {
  	'Transforming FileBlock'.debug();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.openMode = s.openMode;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.uniqId = s.uniqId;
    t.charset = s.charset;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.fileUrl = s.fileUrl.convert();
    
    'Transformed: FileBlock'.debug();
  }
  
rule ForBlock
  transform s : Acceleo!ForBlock
  to t : evoAcceleo!ForBlock {
  	'Transforming ForBlock'.debug();

    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.before = s.before;
    t.each = s.each;
    t.after = s.after;
    t.`guard` = s.`guard`;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.loopVariable = s.loopVariable.convert();
    t.iterSet = s.iterSet.convert();
    
    'Transformed: ForBlock'.debug();
  }
  
rule IfBlock
  transform s : Acceleo!IfBlock
  to t : evoAcceleo!IfBlock {
    'Transforming IfBlock'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    
    t.body = s.body.convert();
    t.ifExpr = s.ifExpr.convert();
    t.`else` = s.`else`.convert();
    t.elseIf = s.elseIf.convert();
    
    'Transformed: IfBlock'.debug();
  }
  
rule Block
  transform s : Acceleo!Block
  to t : evoAcceleo!Block {
    'Transforming Block'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    
    t.body = s.body.convert();
  
    'Transformed: Block'.debug();
  }
  
rule TemplateInvocation
  transform s : Acceleo!TemplateInvocation
  to t : evoAcceleo!TemplateInvocation {
  guard : not isBNR3(s)
  	'Transforming TemplateInvocation'.debug();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.super = s.super;
    
    t.argument = s.argument.convert();
    t.definition = s.definition.convert();
    t.eType = s.eType.convert();
    
    'Transformed: TemplateInvocation'.debug();
  }
  
// We need to use the right type here, which is under ocl::ecore,
// otherwise the rule won't match and won't be called.
// Don't use @greedy + Acceleo!StringLiteralExp since would lead to
// ArrayStoreException and cast errors when copying the transformed object in the parent.
rule StringLiteralExp
  transform s : Acceleo!ocl::ecore::StringLiteralExp
  to t : evoAcceleo!ocl::ecore::StringLiteralExp {   
  	'Transforming StringLiteralExp'.debug();
  
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.stringSymbol = s.stringSymbol;
    
    t.eType = s.eType.convert();
    
    'Transformed: StringLiteralExp'.debug();
  }
  
rule PropertyCallExp
  transform s : Acceleo!ocl::ecore::PropertyCallExp
  to t : evoAcceleo!ocl::ecore::PropertyCallExp {
  guard : not isBNR1(s) and not isBNR2(s)
    'Transforming PropertyCallExp'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.propertyEndPosition = s.propertyEndPosition;
    t.markedPre = s.markedPre;
    
    t.eType = s.eType.convert();
    t.source = s.source.convert();
    t.referredProperty = s.referredProperty.convertFromPropertyCallExp(s);
    
    'Transformed: PropertyCallExp'.debug();
  }
  
rule OperationCallExp
  transform s : Acceleo!ocl::ecore::OperationCallExp
  to t : evoAcceleo!ocl::ecore::OperationCallExp {
  	'Transforming OperationCallExp'.debug();
  
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.markedPre = s.markedPre;
    t.operationCode = s.operationCode;
    t.propertyEndPosition = s.propertyEndPosition;
    
    t.source = s.source.convert();
    t.argument = s.argument.convert();
    t.eType = s.eType.convert();
    t.referredOperation = s.referredOperation.convert();
    
    'Transformed: OperationCallExp'.debug();
  }
  
rule TypeExp
  transform s : Acceleo!ocl::ecore::TypeExp
  to t : evoAcceleo!ocl::ecore::TypeExp {
    'Transforming TypeExp'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    
    t.eType = s.eType.convert();
    t.referredType = s.referredType.convert();
    
    'Transformed: TypeExp'.debug();
  }

rule VariableExp
  transform s : Acceleo!ocl::ecore::VariableExp
  to t : evoAcceleo!ocl::ecore::VariableExp {
    'Transforming VariableExp'.debug();
    
	t.name = s.name;
	t.ordered = s.ordered;
	t.unique = s.unique;
	t.lowerBound = s.lowerBound;
	t.upperBound = s.upperBound;
	//t.many = s.many; // Internal error: java.lang.NullPointerException
	//t.required = s.required; // as above
	t.startPosition = s.startPosition;
	t.endPosition = s.endPosition;
	
	t.eType = s.eType.convert();
	t.referredVariable = s.referredVariable.convert();
	
	'Transformed: VariableExp'.debug();
  }

rule Variable
  transform s : Acceleo!ocl::ecore::Variable
  to t : evoAcceleo!ocl::ecore::Variable {
    'Transforming Variable'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    
    t.eType = s.eType.convert();
  
    'Transformed: Variable'.debug();
  }
  
rule SetType
  transform s : Acceleo!ocl::ecore::SetType
  to t : evoAcceleo!ocl::ecore::SetType {
    'Transforming SetType'.debug();

    t.name = s.name;
    t.instanceClassName = s.instanceClassName;
    //t.instanceClass = s.instanceClass; // Internal error: java.lang.NullPointerException
    //t.defaultValue = s.defaultValue; // Internal error: java.lang.NullPointerException
    t.instanceTypeName = s.instanceTypeName;
    t.serializable = s.serializable;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    //t.kind = s.kind; // Internal error: java.lang.NullPointerException
    
    t.elementType = s.elementType.convert();
    
    'Transformed: SetType'.debug();
  }

rule OrderedSetType
  transform s : Acceleo!ocl::ecore::OrderedSetType
  to t : evoAcceleo!ocl::ecore::OrderedSetType {
    'Transforming OrderedSetType'.debug();
    
    t.name = s.name;
    t.instanceClassName = s.instanceClassName;
    //t.instanceClass = s.instanceClass; // Internal error: java.lang.NullPointerException
    //t.defaultValue = s.defaultValue; // Internal error: java.lang.NullPointerException
    t.instanceTypeName = s.instanceTypeName;
    t.serializable = s.serializable;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    //t.kind = s.kind; // Internal error: java.lang.NullPointerException
    
    t.elementType = s.elementType.convert();
  
    'Transformed: OrderedSetType'.debug();
  }
  
rule CollectionLiteralExp
  transform s : Acceleo!ocl::ecore::CollectionLiteralExp
  to t : evoAcceleo!ocl::ecore::CollectionLiteralExp {
    'Transforming CollectionLiteralExp'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.kind = s.kind;
    //t.simpleRange = s.simpleRange; // Internal error: java.lang.NullPointerException
    
    t.eType = s.eType.convert();
    t.eAnnotations = s.eAnnotations.convert();
    t.part = s.part.convert(); // TODO: CollectionItem
    
    'Transformed: CollectionLiteralExp'.debug();
  }
  
rule CollectionItem
  transform s : Acceleo!ocl::ecore::CollectionItem
  to t : evoAcceleo!ocl::ecore::CollectionItem {
    'Transforming CollectionItem'.debug();
    
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    
    t.eType = s.eType.convert();
    t.item = s.item.convert();
    
    'Transformed: CollectionItem'.debug();
  }
  
// Metamodel instances are converted without transformation rules since their counterpart
// already exists in the evoMetamodel, it just need to be retrieved.

operation Metamodel!ecore::EPackage convert() : evoMetamodel!ecore::EPackage {
  'Converting EPackage '.concat(self.name).debug();

  // get the relative package from the evolved metamodel
  var evoPackage = evoMetamodel!ecore::EPackage.allInstances()->selectOne(package | package.name == self.name);  

  'Converted: EPackage '.concat(self.name).debug();

  return evoPackage;
}

operation Metamodel!ecore::EClass convert() : evoMetamodel!ecore::EClass {
  'Converting EClass '.concat(self.name).debug();

  // get the relative class from the evolved metamodel
  var evoClass = evoMetamodel!ecore::EClass.allInstances()->selectOne(metaclass | metaclass.name == self.name);  

  'Converted: EClass '.concat(self.name).debug();

  return evoClass;
}

// EAttribute is converted by using the PropertyCallExp since otherwise there is no reliable way to get the parent class
// (comparison with allInstances() returns always false), while with it the source.eType can be used.
operation Metamodel!ecore::EAttribute convertFromPropertyCallExp(s : Acceleo!ocl::ecore::PropertyCallExp) : evoMetamodel!ecore::EAttribute {
  // (self is the PropertyCallExp referredProperty)
  
  'Converting EAttribute '.concat(self.name).debug();
  
  // get EAttribute evolved parent EClass
  var parentClass = s.source.eType;
  var evoParentClass = parentClass.convert();
  
  // get the evolved attribute from the evolved class.
  // Note: the attribute could be in a super class, so we use eAllAttributes to get also super class attributes.
  var evoAttribute = evoParentClass.eAllAttributes->selectOne(evoAttribute | evoAttribute.name == self.name);
  
  'Converted: EAttribute '.concat(self.name).debug();

  return evoAttribute;
}

// EReference is converted by using the PropertyCallExp since otherwise there is no reliable way to get the parent class
// (comparison with allInstances() returns always false), while with it the source.eType can be used.
operation Metamodel!ecore::EReference convertFromPropertyCallExp(s : Acceleo!ocl::ecore::PropertyCallExp) : evoMetamodel!ecore::EReference {
  // (self is the PropertyCallExp referredProperty)
  
  'Converting EReference '.concat(self.name).debug();
  
  // get EReference evolved parent EClass
  var parentClass = s.source.eType;
  var evoParentClass = parentClass.convert();
  
  // get the evolved reference from the evolved class.
  // Note: the reference could be in a super class, so we use eAllReferences to get also super class references.
  var evoReference = evoParentClass.eAllReferences->selectOne(evoReference | evoReference.name == self.name);
  
  'Converted: EReference '.concat(self.name).debug();
  
  return evoReference;
}

operation Metamodel!ecore::EEnum convert() : evoMetamodel!ecore::EEnum {
  'Converting EEnum '.concat(self.name).debug();

  // get the relative enum from the evolved metamodel
  var evoEnum = evoMetamodel!ecore::EEnum.allInstances()->selectOne(enum | enum.name == self.name);
  
  'Converted: EEnum '.concat(self.name).debug();
  
  return evoEnum;
}