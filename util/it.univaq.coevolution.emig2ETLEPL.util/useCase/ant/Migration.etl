pre {
	"Running ETL\n".println();
	// GLOBAL VARIABLES
	var DEBUG_MODE = false;
}

post {
	"\nRunning Successful".println();
}

operation Any debug() : Any {
  if (DEBUG_MODE) {
    return self.println();
  }
}

// Custom equivalent function:
// is recursive and returns the element itself if there is no matching rule for it.
operation Any convert() {
  
  var equivalent;
  
  if (self.isKindOf(Collection)) {
    // collection -> recursion
    'Converting Collection '.concat(self.toString()).debug();
    equivalent = self->collect( element | element.convert() );
    'Converted: Collection '.concat(equivalent.toString()).debug();
  } else {
    // single element
    equivalent = self.equivalent();
    if (equivalent.isUndefined()) {
      // no matching rule(s)
      equivalent = self;
    }
  }

  return equivalent;
}
/////////////////////MIGRATION PART /////////////////////////////////// 

operation is_splitAttributeBNR2 (propCallExpOld : WebApp2HTML5!PropertyCallExp) : Boolean {
	var  changedClassBNR2 = Delta!ChangedEClass.allInstances()->selectOne(c | c.instanceOf(Pattern!splitAttributeBNR2ChangedClassBNR2));
	var  delAttribute = Delta!DeletedEAttribute.allInstances()->selectOne(c | c.instanceOf(Pattern!splitAttributeBNR2DelAttribute));
	return (not Pattern!splitAttributeBNR2.isUndefined()) and
		changedClassBNR2.applicationElement.name = propCallExpOld.source.eType.name  and  
	 1 = 1 and 1 = 1 and delAttribute.applicationElement.name = propCallExpOld.referredProperty.name 
	;
}
rule splitAttributeBNR2
	transform propCallExpOld : WebApp2HTML5!ocl::ecore::PropertyCallExp
	to propCallExpNew : evoWebApp2HTML5!ocl::ecore::PropertyCallExp{
	guard: is_splitAttributeBNR2(propCallExpOld)
		var a1 = Delta!AddedEAttribute.allInstances()->select(c | c.instanceOf(Pattern!splitAttributeBNR2A1))->at(0);
		var a2 = Delta!AddedEAttribute.allInstances()->select(c | c.instanceOf(Pattern!splitAttributeBNR2A2))->at(1);

				propCallExpNew.ordered <- propCallExpOld.ordered;	
				var temp = System.user.choose('Choice', Sequence{a1.convert(), a2.convert()});
				propCallExpNew.eType <- temp.eType;	
				propCallExpNew.source <- temp.eContainingClass;	
				propCallExpNew.referredProperty <- temp;
				
				propCallExpNew.unique <- propCallExpOld.unique;	
				propCallExpNew.lowerBound <- propCallExpOld.lowerBound;	
				propCallExpNew.upperBound <- propCallExpOld.upperBound;	
				propCallExpNew.startPosition <- propCallExpOld.startPosition;	
				propCallExpNew.endPosition <- propCallExpOld.endPosition;	
				propCallExpNew.propertyStartPosition <- propCallExpOld.propertyStartPosition;	
				propCallExpNew.propertyEndPosition <- propCallExpOld.propertyEndPosition;	
				propCallExpNew.markedPre <- propCallExpOld.markedPre;
}
operation is_extractInlineMetaClassBNR1 (propCallExpOld : WebApp2HTML5!PropertyCallExp) : Boolean {

var changedPackageBNR1 = Delta!ChangedEPackage.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1ChangedPackageBNR1));
var changedClassBNR1 = Delta!ChangedEClass.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1ChangedClassBNR1));
var deleteAttributeBNR1 = Delta!DeletedEAttribute.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1DeleteAttributeBNR1));
var addReferenceBNR1 = Delta!AddedEReference.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddReferenceBNR1));
var addedClassBNR1 = Delta!AddedEClass.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddedClassBNR1));
var addedAttribute1BNR1 = Delta!AddedEAttribute.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddedAttribute1BNR1));				 
var addedAttribute2BNR1 = Delta!AddedEAttribute.allInstances()->selectOne(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddedAttribute2BNR1));
return (not Pattern!extractInlineMetaClassBNR1.isUndefined()) and
	changedClassBNR1.applicationElement.name = propCallExpOld.source.eType.name  and  
 deleteAttributeBNR1.applicationElement.name = propCallExpOld.referredProperty.name 
and 1 = 1 and	1 = 1 and 1 = 1  and addedClassBNR1.name = addReferenceBNR1.eType.name and addReferenceBNR1.name = deleteAttributeBNR1.name;
}
//TODO
rule extractInlineMetaClassBNR1
	transform propCallExpOld : WebApp2HTML5!ocl::ecore::PropertyCallExp
	to propCallExpNew : evoWebApp2HTML5!ocl::ecore::PropertyCallExp {
	guard: is_extractInlineMetaClassBNR1(propCallExpOld)
		var addedAttribute1BNR1 = Delta!AddedEAttribute.allInstances()->select(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddedAttribute1BNR1))->at(0);				 
		var addedAttribute2BNR1 = Delta!AddedEAttribute.allInstances()->select(c | c.instanceOf(Pattern!extractInlineMetaClassBNR1AddedAttribute2BNR1))->at(1);				 
				propCallExpNew.name <- propCallExpOld.name.convert();	

				var tempBNR1 = System.user.choose('Choice', Sequence{addedAttribute1BNR1.convert(), addedAttribute2BNR1.convert()});
				propCallExpNew.eType <- tempBNR1.eType;	
				propCallExpNew.source <- tempBNR1.eContainingClass;	
				
				propCallExpNew.referredProperty <- tempBNR1;	
				propCallExpNew.ordered <- propCallExpOld.ordered.convert();	
				propCallExpNew.unique <- propCallExpOld.unique.convert();	
				propCallExpNew.lowerBound <- propCallExpOld.lowerBound.convert();	
				propCallExpNew.upperBound <- propCallExpOld.upperBound.convert();	
				propCallExpNew.startPosition <- propCallExpOld.startPosition.convert();	
				propCallExpNew.endPosition <- propCallExpOld.endPosition.convert();	
				propCallExpNew.propertyStartPosition <- propCallExpOld.propertyStartPosition.convert();	
				propCallExpNew.propertyEndPosition <- propCallExpOld.propertyEndPosition.convert();	
				propCallExpNew.markedPre <- propCallExpOld.markedPre.convert();	
}
//TODO
operation is_changeReferenceTypeBNR3 (templateInvocationOld : WebApp2HTML5!TemplateInvocation) : Boolean {
var  changedClassBNR3 = Delta!ChangedEClass.allInstances()->selectOne(c | c.instanceOf(Pattern!changeReferenceTypeBNR3ChangedClassBNR3));
var  changeRefBNR3 = Delta!ChangedEReference.allInstances()->selectOne(c | c.instanceOf(Pattern!changeReferenceTypeBNR3ChangeRefBNR3));
'BNR3'.println();
if (not templateInvocationOld.argument->at(0)->isTypeOf(WebApp2HTML5!ocl::ecore::PropertyCallExp))
	return false;
if (not templateInvocationOld.argument->at(0).referredProperty->isTypeOf(Webapp!ecore::EReference))
	return false;
return (not Pattern!changeReferenceTypeBNR3.isUndefined()) and (templateInvocationOld.argument->at(0).referredProperty.name = changeRefBNR3.name) and 
       (templateInvocationOld.argument->at(0).source.eType.name == changedClassBNR3.name);
}
rule changeReferenceTypeBNR3
	transform templateInvocationOld : WebApp2HTML5!TemplateInvocation
	to templateInvocationNew : evoWebApp2HTML5!TemplateInvocation {
	guard: is_changeReferenceTypeBNR3(templateInvocationOld)
		'I am here!'.println();
	/*	var  changedClassBNR3 = Delta!ChangedEClass.allInstances()->selectOne(c | c.instanceOf(Pattern!changeReferenceTypeBNR3ChangedClassBNR3));
		var  changeRefBNR3 = Delta!ChangedEReference.allInstances()->selectOne(c | c.instanceOf(Pattern!changeReferenceTypeBNR3ChangeRefBNR3));
				
	var propertyCallExp = templateInvocationOld.argument.at(0);
    var template = templateInvocationNew.definition;
    var reference = propertyCallExp.referredProperty;
    
    var evoReference = reference.convert(propertyCallExp);
    var evoReferencedClass = evoReference.eReferenceType;
    var parentClass = propertyCallExp.source.eType; // reference parent class
  
   
  	// let the user choose the compatible template to use
       
  	var compatibleTemplates = WebApp2HTML5!Template.allInstances()->select(otherTemplate | otherTemplate.isCompatibleWith(evoReferencedClass));
  
  	var message = template.name.concat(' is not compatible anymore with ').concat(parentClass.name).concat('.').concat(reference.name)
                .concat(', please select the template to use:');
  	var replacerTemplate = System.user.choose(message, compatibleTemplates);
    
    templateInvocationNew.name = templateInvocationOld.name;
    templateInvocationNew.ordered = templateInvocationOld.ordered;
    templateInvocationNew.unique = templateInvocationOld.unique;
    templateInvocationNew.lowerBound = templateInvocationOld.lowerBound;
    templateInvocationNew.upperBound = templateInvocationOld.upperBound;
    
    templateInvocationNew.startPosition = templateInvocationOld.startPosition;
    templateInvocationNew.endPosition = templateInvocationOld.endPosition;
    templateInvocationNew.super = templateInvocationOld.super;
    templateInvocationNew.argument = templateInvocationOld.argument.convert();
    templateInvocationNew.argument.at(0).eType = evoReferencedClass; // the reference changed type => it must be updated
    templateInvocationNew.definition = replacerTemplate.convert();
    templateInvocationNew.eType = templateInvocationOld.eType.convert();
    'Transformed for BNR3: TemplateInvocation'.debug();*/
	}	
///////////////////////////////////////////////////////////////////////
///////////////////// CONSERVATIVE COPY ///////////////////////////////
// Updates everything to the evolved metamodel without doing any other change.

rule Module
  transform s : WebApp2HTML5!Module
  to t : evoWebApp2HTML5!Module {
  	'Transforming Module'.debug();
	t.name = s.name;
	t.nsURI = s.nsURI;
	t.nsPrefix = s.nsPrefix;
	t.deprecated = s.deprecated;
	t.startHeaderPosition = s.startHeaderPosition;
	t.endHeaderPosition = s.endHeaderPosition;
	t.eFactoryInstance = s.eFactoryInstance;
	t.documentation = s.documentation;
	t.eAnnotations = s.eAnnotations.convert();
	t.eClassifiers = s.eClassifiers.convert();
	t.eSubpackages = s.eSubpackages.convert();
	t.input = s.input.convert();
	t.`extends` = s.`extends`.convert();
	t.imports = s.imports.convert();
	t.ownedModuleElement = s.ownedModuleElement.convert();
	
	'Transformed: Module'.debug();
}
 
rule TypedModel
  transform s : WebApp2HTML5!TypedModel
  to t : evoWebApp2HTML5!TypedModel {
  	'Transforming TypedModel'.debug();

    t.takesTypesFrom = s.takesTypesFrom.convert(); // contains the main metamodel EPackage
    
    'Transformed: TypedModel'.debug();
  }

rule Template
  transform s : WebApp2HTML5!Template
  to t : evoWebApp2HTML5!Template {
  	'Transforming Template'.debug();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.visibility = s.visibility;
    t.deprecated = s.deprecated;
    t.main = s.main;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.documentation = s.documentation;
    t.`guard` = s.`guard`;
    t.`post` = s.`post`;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.overrides = s.overrides.convert();
    t.parameter = s.parameter.convert(); // ocl::ecore::Variable
    
    'Transformed: Template'.debug();
  }
  
rule FileBlock
  transform s : WebApp2HTML5!FileBlock
  to t : evoWebApp2HTML5!FileBlock {
  	'Transforming FileBlock'.debug();
  
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.openMode = s.openMode;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.uniqId = s.uniqId;
    t.charset = s.charset;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.fileUrl = s.fileUrl.convert();
    
    'Transformed: FileBlock'.debug();
  }
  
rule ForBlock
  transform s : WebApp2HTML5!ForBlock
  to t : evoWebApp2HTML5!ForBlock {
  	'Transforming ForBlock'.debug();

    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.eGenericType = s.eGenericType;
    t.init = s.init;
    t.before = s.before;
    t.each = s.each;
    t.after = s.after;
    t.`guard` = s.`guard`;
    
    t.eAnnotations = s.eAnnotations.convert();
    t.eType = s.eType.convert();
    t.body = s.body.convert();
    t.loopVariable = s.loopVariable.convert();
    t.iterSet = s.iterSet.convert();
    
    'Transformed: ForBlock'.debug();
  }
  
rule IfBlock
  transform s : WebApp2HTML5!IfBlock
  to t : evoWebApp2HTML5!IfBlock {
    'Transforming IfBlock'.debug(); 
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.body = s.body.convert();
    t.ifExpr = s.ifExpr.convert();
    t.`else` = s.`else`.convert();
    t.elseIf = s.elseIf.convert();
    
    'Transformed: IfBlock'.debug();
  }
  
rule Block
  transform s : WebApp2HTML5!Block
  to t : evoWebApp2HTML5!Block {
    'Transforming Block'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.body = s.body.convert();
    'Transformed: Block'.debug();
  }
  
rule TemplateInvocation
  transform s : WebApp2HTML5!TemplateInvocation
  to t : evoWebApp2HTML5!TemplateInvocation {
  guard : not is_changeReferenceTypeBNR3(s)
  	'Transforming TemplateInvocation'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.super = s.super;
    t.argument = s.argument.convert();
    t.definition = s.definition.convert();
    t.eType = s.eType.convert();
    'Transformed: TemplateInvocation'.debug();
  }
  
// We need to use the right type here, which is under ocl::ecore,
// otherwise the rule won't match and won't be called.
// Don't use @greedy + WebApp2HTML5!StringLiteralExp since would lead to
// ArrayStoreException and cast errors when copying the transformed object in the parent.
rule StringLiteralExp
  transform s : WebApp2HTML5!ocl::ecore::StringLiteralExp
  to t : evoWebApp2HTML5!ocl::ecore::StringLiteralExp {   
  	'Transforming StringLiteralExp'.debug();
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.stringSymbol = s.stringSymbol;
    t.eType = s.eType.convert();
    'Transformed: StringLiteralExp'.debug();
  }
  
rule PropertyCallExp
  transform s : WebApp2HTML5!ocl::ecore::PropertyCallExp
  to t : evoWebApp2HTML5!ocl::ecore::PropertyCallExp {
  guard : not (is_extractInlineMetaClassBNR1(s) or is_splitAttributeBNR2(s))
    'Transforming PropertyCallExp'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.propertyEndPosition = s.propertyEndPosition;
    t.markedPre = s.markedPre;
    t.eType = s.eType.convert();
    t.source = s.source.convert();
    t.referredProperty = s.referredProperty.convert();
    'Transformed: PropertyCallExp'.debug();
  }
  
rule OperationCallExp
  transform s : WebApp2HTML5!ocl::ecore::OperationCallExp
  to t : evoWebApp2HTML5!ocl::ecore::OperationCallExp {
  	'Transforming OperationCallExp'.debug();
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.propertyStartPosition = s.propertyStartPosition;
    t.markedPre = s.markedPre;
    t.operationCode = s.operationCode;
    t.propertyEndPosition = s.propertyEndPosition;
    t.source = s.source.convert();
    t.argument = s.argument.convert();
    t.eType = s.eType.convert();
    t.referredOperation = s.referredOperation.convert();
    'Transformed: OperationCallExp'.debug();
  }
  
rule TypeExp
  transform s : WebApp2HTML5!ocl::ecore::TypeExp
  to t : evoWebApp2HTML5!ocl::ecore::TypeExp {
    'Transforming TypeExp'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // is just a Boolean but gives java.lang.NullPointerException
    //t.required = s.required; // as above
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.eType = s.eType.convert();
    t.referredType = s.referredType.convert();
    'Transformed: TypeExp'.debug();
  }

rule VariableExp
  transform s : WebApp2HTML5!ocl::ecore::VariableExp
  to t : evoWebApp2HTML5!ocl::ecore::VariableExp {
    'Transforming VariableExp'.debug();
	t.name = s.name;
	t.ordered = s.ordered;
	t.unique = s.unique;
	t.lowerBound = s.lowerBound;
	t.upperBound = s.upperBound;
	//t.many = s.many; // Internal error: java.lang.NullPointerException
	//t.required = s.required; // as above
	t.startPosition = s.startPosition;
	t.endPosition = s.endPosition;
	
	t.eType = s.eType.convert();
	t.referredVariable = s.referredVariable.convert();
	
	'Transformed: VariableExp'.debug();
  }

rule Variable
  transform s : WebApp2HTML5!ocl::ecore::Variable
  to t : evoWebApp2HTML5!ocl::ecore::Variable {
    'Transforming Variable'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    t.eType = s.eType.convert();
    'Transformed: Variable'.debug();
  }
  
rule SetType
  transform s : WebApp2HTML5!ocl::ecore::SetType
  to t : evoWebApp2HTML5!ocl::ecore::SetType {
    'Transforming SetType'.debug();
    t.name = s.name;
    t.instanceClassName = s.instanceClassName;
    //t.instanceClass = s.instanceClass; // Internal error: java.lang.NullPointerException
    //t.defaultValue = s.defaultValue; // Internal error: java.lang.NullPointerException
    t.instanceTypeName = s.instanceTypeName;
    t.serializable = s.serializable;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    //t.kind = s.kind; // Internal error: java.lang.NullPointerException
    
    t.elementType = s.elementType.convert();
    
    'Transformed: SetType'.debug();
  }

rule OrderedSetType
  transform s : WebApp2HTML5!ocl::ecore::OrderedSetType
  to t : evoWebApp2HTML5!ocl::ecore::OrderedSetType {
    'Transforming OrderedSetType'.debug();
    t.name = s.name;
    t.instanceClassName = s.instanceClassName;
    //t.instanceClass = s.instanceClass; // Internal error: java.lang.NullPointerException
    //t.defaultValue = s.defaultValue; // Internal error: java.lang.NullPointerException
    t.instanceTypeName = s.instanceTypeName;
    t.serializable = s.serializable;
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.typeStartPosition = s.typeStartPosition;
    t.typeEndPosition = s.typeEndPosition;
    //t.kind = s.kind; // Internal error: java.lang.NullPointerException
    t.elementType = s.elementType.convert();
    'Transformed: OrderedSetType'.debug();
  }
  
rule CollectionLiteralExp
  transform s : WebApp2HTML5!ocl::ecore::CollectionLiteralExp
  to t : evoWebApp2HTML5!ocl::ecore::CollectionLiteralExp {
    'Transforming CollectionLiteralExp'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.startPosition = s.startPosition;
    t.endPosition = s.endPosition;
    t.kind = s.kind;
    //t.simpleRange = s.simpleRange; // Internal error: java.lang.NullPointerException
    t.eType = s.eType.convert();
    t.eAnnotations = s.eAnnotations.convert();
    t.part = s.part.convert(); // TODO: CollectionItem
    
    'Transformed: CollectionLiteralExp'.debug();
  }
  
rule CollectionItem
  transform s : WebApp2HTML5!ocl::ecore::CollectionItem
  to t : evoWebApp2HTML5!ocl::ecore::CollectionItem {
    'Transforming CollectionItem'.debug();
    t.name = s.name;
    t.ordered = s.ordered;
    t.unique = s.unique;
    t.lowerBound = s.lowerBound;
    t.upperBound = s.upperBound;
    //t.many = s.many; // Internal error: java.lang.NullPointerException
    //t.required = s.required; // Internal error: java.lang.NullPointerException
    t.eType = s.eType.convert();
    t.item = s.item.convert();
    'Transformed: CollectionItem'.debug();
  }
  
// Metamodel instances are converted without transformation rules since their counterpart
// already exists in the evoMetamodel, it just need to be retrieved.

operation Webapp!ecore::EPackage convert() : evoWebapp!ecore::EPackage {
  'Converting EPackage '.concat(self.name).debug();
  // get the relative package from the evolved metamodel
  var evoPackage = evoWebapp!ecore::EPackage.allInstances()->selectOne(package | package.name == self.name);  
  'Converted: EPackage '.concat(self.name).debug();
  return evoPackage;
}

operation Webapp!ecore::EClass convert() : evoWebapp!ecore::EClass {
  'Converting EClass '.concat(self.name).debug();
  // get the relative class from the evolved metamodel
  var evoClass = evoWebapp!ecore::EClass.allInstances()->selectOne(metaclass | metaclass.name == self.name);  
  'Converted: EClass '.concat(self.name).debug();
  return evoClass;
}

// EAttribute is converted by using the PropertyCallExp since otherwise there is no reliable way to get the parent class
// (comparison with allInstances() returns always false), while with it the source.eType can be used.
operation Webapp!ecore::EAttribute convert() : evoWebapp!ecore::EAttribute {
  // (self is the PropertyCallExp referredProperty)  
  'Converting EAttribute '.concat(self.name).debug();
  var parentClass = self.eContainingClass;
  var evoParentClass = parentClass.convert();
  var evoAttribute = evoParentClass.eAllAttributes->selectOne(evoAttribute | evoAttribute.name == self.name);
  return evoAttribute;
}
operation Delta!AddedEAttribute convert() : evoWebapp!ecore::EAttribute {
  // (self is the PropertyCallExp referredProperty)  
  'Converting EAttribute '.concat(self.name).debug();
  var parentClass = self.eContainingClass;
  if(self.eContainingClass.isTypeOf(Delta!ChangedEClass))
  	parentClass = self.eContainingClass.applicationElement;
  var evoParentClass = parentClass.convert();
  var evoAttribute = evoParentClass.eAllAttributes->selectOne(evoAttribute | evoAttribute.name == self.name);
  return evoAttribute;
}
operation Delta!AddedEClass convert() : evoWebapp!ecore::EClass {
  // (self is the PropertyCallExp referredProperty)  
  'Converting EAttribute '.concat(self.name).debug();
  var evoParentClass = evoWebapp!ecore::EClass.allInstances()->selectOne(metaclass | metaclass.name == self.name);
  return evoParentClass;
}
// EReference is converted by using the PropertyCallExp since otherwise there is no reliable way to get the parent class
// (comparison with allInstances() returns always false), while with it the source.eType can be used.
operation Webapp!ecore::EReference convert() : evoWebapp!ecore::EReference {
  'Converting EReference '.concat(self.name).debug();
  var parentClass = self.eContainingClass;
  var evoParentClass = parentClass.convert();
  var evoReference = evoParentClass.eAllReferences->selectOne(evoReference | evoReference.name == self.name);
  return evoReference;
}

operation Webapp!ecore::EEnum convert() : evoWebapp!ecore::EEnum {
  'Converting EEnum '.concat(self.name).debug();
  // get the relative enum from the evolved metamodel
  var evoEnum = evoWebapp!ecore::EEnum.allInstances()->selectOne(enum | enum.name == self.name);
  'Converted: EEnum '.concat(self.name).debug();
  return evoEnum;
}
